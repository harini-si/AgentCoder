[
    {
        "game": "catcher",
        "prompt": "Create a catcher character, represented as a rectangle, positioned at the bottom and the middle of the screen.Allow the player to control the catcher's horizontal movement using the left and right arrow keys on the keyboard.Periodically spawn balls with random x-coordinates at the top of the screen. The ball should be visually distinct and easily recognizable. There should always be at least one ball on the screen.Make the ball move downwards at a steady pace towards the catcher. The speed can be constant or increase gradually as the game progresses.Detect collisions between the catcher and the ball. When the catcher catches a ball, increment the player's score and display this score in the top-left corner of the screen.Give the player a 3 lives. Each time a ball is missed by the catcher and reaches the bottom of the screen, decrease the player's life count by one.End the game when the player's lives reach zero. Display a 'Game Over!' message and temporarily halt gameplay but dont terminate the game.Provide an option for the player to click the screen to restart the game after the 'Game Over' screen is displayed.Continuously generate new balls after each catch or miss, ensuring endless gameplay. Optionally, increase the game's difficulty gradually by speeding up the ball's fall or reducing the size of the catcher as the player's score increases.",
        "backbone": "\nimport pygame\nimport sys\nimport random\n\n# initialize constants\nSCREEN_WIDTH = 1000\nSCREEN_HEIGHT = 1000\n\n\nclass Catcher(pygame.sprite.Sprite):\n    def __init__(self, x):\n        \"\"\"\n        Initialize the catcher\n        self.rect should be a pygame.Rect object with the initial position of the catcher\n        \"\"\"\n        super().__init__()\n\n\nclass Ball(pygame.sprite.Sprite):\n    def __init__(self, x):\n        \"\"\"\n        initialize the ball\n        x should be the initial x-coordinate of the catcher\n        self.rect should be a pygame.Rect object with the initial position of the catcher\n        \"\"\"\n        super().__init__()\n\n\n\nclass Game:\n    def __init__(self):\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.reset_game()\n\n    def reset_game(self):\n        \"\"\"\n        Initialize / reset the game\n        self.game_over is a boolean representing whether the game is over\n        self.lives represents the number of lives the player has\n        self.score keeps track of the player's score\n        self.catch is an instance of the Catcher class\n        self.balls is a Sprite Group of all balls (of the class Ball), it should never be empty\n        \"\"\"\n        self.game_over = False\n        self.lives = 3\n        self.score = 0\n        self.catcher = Catcher(...)\n        ...\n\n\n    def run(self, event):\n        \"\"\" \n        please implement the main game loop here\n        \"\"\"\n        \n\n\nif __name__ == \"__main__\":\n    game = Game()\n    pygame.init()\n    running = True\n    while running:\n        event = pygame.event.poll()\n        running = game.run(event)\n    pygame.quit()\n",
        "completion_list": [
            "\n# Import the necessary libraries\nimport pygame\nimport sys\nimport random\n\n# Constants\nSCREEN_WIDTH = 1000\nSCREEN_HEIGHT = 1000\n\n# Class for the Catcher\nclass Catcher(pygame.sprite.Sprite):\n    def __init__(self, x):\n        # Initialize the catcher\n\n# Class for the Ball\nclass Ball(pygame.sprite.Sprite):\n    def __init__(self, x):\n        # Initialize the ball\n\n# Game Class\nclass Game:\n    def __init__(self):\n        # Initialize the game\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.reset_game()\n        \n    def reset_game(self):\n        # Reset the game\n\n    def run(self, event):\n        # Implement the main game loop\n"
        ],
        "test_case_list": [
            "\nimport pygame\nimport random\nimport sys\n\n# Initialize constants\nSCREEN_WIDTH = 1000\nSCREEN_HEIGHT = 1000\nCATCHER_WIDTH = 100\nCATCHER_HEIGHT = 20\nBALL_RADIUS = 10\n\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\nclass Catcher(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((CATCHER_WIDTH, CATCHER_HEIGHT))\n        self.image.fill(WHITE)\n        self.rect = self.image.get_rect()\n        self.rect.midbottom = (SCREEN_WIDTH // 2, SCREEN_HEIGHT - 10)\n    \n    def update(self, direction):\n        if direction == 'left':\n            self.rect.x -= 5\n        elif direction == 'right':\n            self.rect.x += 5\n        self.rect.clamp_ip(pygame.Rect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT))\n\nclass Ball(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((BALL_RADIUS * 2, BALL_RADIUS * 2))\n        self.image.fill(WHITE)\n        pygame.draw.circle(self.image, BLACK, (BALL_RADIUS, BALL_RADIUS), BALL_RADIUS)\n        self.rect = self.image.get_rect()\n        self.rect.x = random.randint(0, SCREEN_WIDTH - BALL_RADIUS * 2)\n        self.rect.y = 0\n\n    def update(self):\n        self.rect.y += 3\n\nclass Game:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.clock = pygame.time.Clock()\n        self.reset_game()\n    \n    def reset_game(self):\n        self.game_over = False\n        self.lives = 3\n        self.score = 0\n        self.catcher = Catcher()\n        self.balls = pygame.sprite.Group()\n    \n    def run(self, event):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n\n        # Handle catcher movement\n        keys = pygame.key.get_pressed()\n        if keys[pygame.K_LEFT]:\n            self.catcher.update('left')\n        if keys[pygame.K_RIGHT]:\n            self.catcher.update('right')\n\n        # Spawn new balls\n        if len(self.balls) == 0:\n            self.balls.add(Ball())\n\n        # Update ball positions\n        for ball in self.balls:\n            ball.update()\n\n        # Check for collisions\n        collisions = pygame.sprite.spritecollide(self.catcher, self.balls, True)\n        if collisions:\n            self.score += 1\n\n        # Check for missed balls\n        for ball in self.balls:\n            if ball.rect.y >= SCREEN_HEIGHT:\n                self.lives -= 1\n                self.balls.remove(ball)\n\n        # Game over condition\n        if self.lives == 0:\n            self.game_over = True\n        \n        # Display elements\n        self.screen.fill(BLACK)\n        self.balls.draw(self.screen)\n        self.screen.blit(self.catcher.image, self.catcher.rect)\n        self.clock.tick(60)\n        pygame.display.flip()\n\n        return True if not self.game_over else False\n\n# Test cases\ngame = Game()\nassert game.score == 0, \"Initial score should be 0\"\nassert game.lives == 3, \"Initial lives should be 3\"\nassert not game.game_over, \"Game should not be over initially\"\nassert isinstance(game.catcher, Catcher), \"Catcher should be an instance of the Catcher class\"\nassert isinstance(game.balls, pygame.sprite.Group), \"Balls should be a Sprite Group\"\nassert len(game.balls) > 0, \"There should be at least one initial ball on the screen\"\n"
        ]
    }
]